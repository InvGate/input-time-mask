{"version":3,"sources":["ng://ngx-time-mask/lib/ngx-time-mask.directive.ts","ng://ngx-time-mask/lib/ngx-time-mask.module.ts"],"names":["NgxTimeMaskDirective","element","renderer","ngModel","this","change","EventEmitter","minHour","maxHour","fieldJustGotFocus","prototype","onKeyDown","evt","keyCode","_checkAndJumpCursor","preventDefault","_setInputText","key","onClick","_getCursorPosition","nativeElement","setSelectionRange","onFocus","onBlur","_validateField","selectedTime","value","split","completeTime","setProperty","inputDataChanged","caretPosition","shiftKey","valueToAppend","input","hours","minutes","getHoursInStringAfterAppend","_setHours","_setMinutes","limitToReset","valueAfterAppend","toString","hoursArray","firstDigit","secondDigit","newHour","sendCursorToMinutes","Number","minutesArray","resetCursor","newMinutes","cursorPos","document","hasOwnProperty","focus","oSel","createRange","moveStart","length","text","selectionStart","update","emit","Directive","args","selector","providers","NgModel","ElementRef","decorators","type","Self","Renderer2","Output","Input","HostListener","NgxTimeMaskModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, HostListener, Renderer2, Self, EventEmitter, Output, Input } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nconst MAC_ENTER = 3;\nconst BACKSPACE = 8;\nconst TAB = 9;\nconst LEFT_ARROW = 37;\nconst UP_ARROW = 38;\nconst RIGHT_ARROW = 39;\nconst DOWN_ARROW = 40;\nconst DELETE = 46;\nconst ZERO = 48;\nconst NINE = 57;\nconst NUMPAD_ZERO = 96;\nconst NUMPAD_NINE = 105;\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[ngModel][ngxTimeMask]',\n    providers: [NgModel],\n})\nexport class NgxTimeMaskDirective {\n    // tslint:disable-next-line: no-output-native\n    @Output() change = new EventEmitter();\n    @Input() minHour: number = 1;\n    @Input() maxHour: number = 12;\n\n    private fieldJustGotFocus = false;\n\n    constructor(@Self() private element: ElementRef, private renderer: Renderer2, private ngModel: NgModel) {}\n\n    /** Listener on Keydown */\n    @HostListener('keydown', ['$event'])\n    onKeyDown(evt: KeyboardEvent) {\n        const keyCode = evt.keyCode;\n        switch (keyCode) {\n            case LEFT_ARROW:\n            case RIGHT_ARROW:\n            case TAB:\n                this._checkAndJumpCursor(keyCode, evt);\n                break;\n\n            case DELETE:\n            case BACKSPACE:\n                evt.preventDefault();\n                break;\n\n            case DOWN_ARROW:\n                this._setInputText(null, -1);\n                break;\n            case UP_ARROW:\n                this._setInputText(null, 1);\n                break;\n\n            default:\n                if ((keyCode >= ZERO && keyCode <= NINE) || (keyCode >= NUMPAD_ZERO && keyCode <= NUMPAD_NINE)) {\n                    this._setInputText(evt.key, 0);\n                }\n        }\n\n        if (keyCode !== TAB) {\n            evt.preventDefault();\n        }\n    }\n\n    /** Listener on click */\n    @HostListener('click', ['$event'])\n    onClick() {\n        this.fieldJustGotFocus = true;\n        const caretPosition = this._getCursorPosition();\n        if (caretPosition < 3) {\n            this.element.nativeElement.setSelectionRange(0, 2);\n        } else {\n            this.element.nativeElement.setSelectionRange(3, 6);\n        }\n    }\n\n    /** Listener on focus */\n    @HostListener('focus', ['$event'])\n    onFocus() {\n        this.fieldJustGotFocus = true;\n        const caretPosition = this._getCursorPosition();\n        if (caretPosition < 3) {\n            this.element.nativeElement.setSelectionRange(0, 2);\n        } else {\n            this.element.nativeElement.setSelectionRange(3, 6);\n        }\n    }\n\n    /** Listener on blur */\n    @HostListener('blur', ['$event'])\n    onBlur() {\n        this._validateField();\n    }\n\n    private _validateField() {\n        const selectedTime = this.element.nativeElement.value.split(':');\n        if (selectedTime[0] === '00') {\n            const completeTime = `01:${selectedTime[1]}`;\n\n            this.renderer.setProperty(this.element.nativeElement, 'value', completeTime);\n            this.inputDataChanged();\n        }\n    }\n\n    private _checkAndJumpCursor(keyCode: number, evt?: KeyboardEvent) {\n        const caretPosition = this._getCursorPosition();\n\n        switch (keyCode) {\n            case RIGHT_ARROW:\n                this.element.nativeElement.setSelectionRange(3, 6);\n                break;\n\n            case LEFT_ARROW:\n                this.element.nativeElement.setSelectionRange(0, 2);\n                break;\n\n            case TAB:\n                if (caretPosition < 2 && !evt.shiftKey) {\n                    this.element.nativeElement.setSelectionRange(3, 6);\n                    evt.preventDefault();\n                } else if (caretPosition > 2 && evt.shiftKey) {\n                    this.element.nativeElement.setSelectionRange(0, 2);\n                    evt.preventDefault();\n                }\n        }\n\n        this.fieldJustGotFocus = true;\n        this._validateField();\n    }\n\n    private _setInputText(key: string, valueToAppend: number) {\n        const input: string[] = this.element.nativeElement.value.split(':');\n\n        let hours: string = input[0];\n        let minutes: string = input[1];\n        const caretPosition = this._getCursorPosition();\n        if (caretPosition < 3) {\n            hours = this.getHoursInStringAfterAppend(+hours, valueToAppend, this.maxHour);\n            this._setHours(hours, minutes, key);\n        } else {\n            minutes = this.getHoursInStringAfterAppend(+minutes, valueToAppend, 60);\n            this._setMinutes(hours, minutes, key);\n        }\n    }\n\n    getHoursInStringAfterAppend(hours: number, valueToAppend: number, limitToReset: number): string {\n        // Hours should be b/w  01 - 12 or 00 - 23 and Minutes should be 0-59\n        if (limitToReset === this.maxHour) {\n            if (hours <= limitToReset) {\n                let valueAfterAppend = hours + valueToAppend;\n                if (valueAfterAppend < 0) {\n                    valueAfterAppend = this.maxHour;\n                } else if (valueAfterAppend > limitToReset) {\n                    valueAfterAppend = this.maxHour === 12 ? 1 : 0;\n                }\n                return valueAfterAppend < 10 ? `0${valueAfterAppend}` : `${valueAfterAppend}`;\n            }\n        } else {\n            if (hours <= limitToReset) {\n                let valueAfterAppend = hours + valueToAppend;\n                if (valueAfterAppend < 0) {\n                    valueAfterAppend = 59;\n                } else if (valueAfterAppend > limitToReset) {\n                    valueAfterAppend = 0;\n                }\n                return valueAfterAppend < 10 ? `0${valueAfterAppend}` : `${valueAfterAppend}`;\n            }\n        }\n\n        return this.minHour.toString();\n    }\n\n    private _setHours(hours: string, minutes: string, key) {\n        const hoursArray: string[] = hours.split('');\n        const firstDigit: string = hoursArray[0];\n        const secondDigit: string = hoursArray[1];\n\n        let newHour = '';\n\n        let completeTime = '';\n        let sendCursorToMinutes = false;\n        if (key !== null) {\n            if (firstDigit === '-' || this.fieldJustGotFocus) {\n                newHour = `0${key}`;\n                sendCursorToMinutes = Number(key) > (this.maxHour > 20 ? 2 : 1);\n                this.fieldJustGotFocus = false;\n            } else {\n                newHour = `${secondDigit}${+key === 0 && +secondDigit === 0 ? this.minHour.toString() : key}`;\n                if (Number(newHour) > this.maxHour) {\n                    newHour = this.maxHour.toString();\n                }\n                if (Number(newHour) === 0) {\n                    newHour = this.minHour.toString();\n                }\n                sendCursorToMinutes = true;\n            }\n        } else {\n            newHour = `${hours}`;\n            if (Number(newHour) > this.maxHour) {\n                newHour = this.maxHour.toString();\n            }\n            if (Number(newHour) === 0 && this.maxHour === 23) {\n                newHour = `0${this.minHour.toString()}`;\n            } else if (Number(newHour) === 0) {\n                newHour = this.maxHour.toString();\n            }\n        }\n\n        completeTime = `${newHour}:${minutes}`;\n\n        this.renderer.setProperty(this.element.nativeElement, 'value', completeTime);\n        this.inputDataChanged();\n        if (sendCursorToMinutes) {\n            this.element.nativeElement.setSelectionRange(3, 6);\n            this.fieldJustGotFocus = true;\n        } else {\n            this.element.nativeElement.setSelectionRange(0, 2);\n            this.fieldJustGotFocus = false;\n        }\n    }\n\n    private _setMinutes(hours: string, minutes: string, key) {\n        const minutesArray: string[] = minutes.split('');\n        const firstDigit: string = minutesArray[0];\n        const secondDigit: string = minutesArray[1];\n        let resetCursor = false;\n\n        let newMinutes = '';\n\n        let completeTime = '';\n\n        if (key !== null) {\n            if (firstDigit === '-' || this.fieldJustGotFocus) {\n                newMinutes = `0${key}`;\n            } else {\n                if (Number(minutes) === 59) {\n                    newMinutes = `0${key}`;\n                } else {\n                    newMinutes = `${secondDigit}${key}`;\n                    if (Number(newMinutes) > 59) {\n                        newMinutes = '59';\n                    }\n                    resetCursor = true;\n                }\n            }\n        } else {\n            newMinutes = `${minutes}`;\n            if (Number(newMinutes) > 59) {\n                newMinutes = '00';\n            }\n        }\n\n        completeTime = `${hours}:${newMinutes}`;\n\n        this.renderer.setProperty(this.element.nativeElement, 'value', completeTime);\n        this.inputDataChanged();\n        if (resetCursor) {\n            this.element.nativeElement.setSelectionRange(0, 2);\n            this.fieldJustGotFocus = true;\n        } else {\n            this.element.nativeElement.setSelectionRange(3, 6);\n            this.fieldJustGotFocus = false;\n        }\n    }\n\n    /*\n     ** Returns the cursor position of the specified text field.\n     ** Return value range is 0 - imput value length.\n     */\n    private _getCursorPosition(): number {\n        // Initialize\n        let cursorPos = 0;\n\n        const nativeElement = this.element.nativeElement;\n\n        // IE Support\n        if (document.hasOwnProperty('selection')) {\n            // Set focus on the element\n            nativeElement.focus();\n\n            // To get cursor position, get empty selection range\n            // tslint:disable-next-line: no-string-literal\n            const oSel = document['selection'].createRange();\n\n            // Move selection start to 0 position\n            oSel.moveStart('character', -nativeElement.value.length);\n\n            // The caret position is selection length\n            cursorPos = oSel.text.length;\n        } else if (nativeElement.selectionStart || nativeElement.selectionStart === '0') {\n            // Firefox support\n            cursorPos = nativeElement.selectionStart;\n        }\n\n        // Return results\n        return cursorPos;\n    }\n\n    /** Emit Data on Change  */\n    private inputDataChanged() {\n        this.ngModel.update.emit(this.element.nativeElement.value);\n        this.change.emit(this.element.nativeElement.value);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxTimeMaskDirective } from './ngx-time-mask.directive';\n\n\n\n@NgModule({\n  declarations: [NgxTimeMaskDirective],\n  imports: [\n  ],\n  exports: [NgxTimeMaskDirective]\n})\nexport class NgxTimeMaskModule { }\n"]}